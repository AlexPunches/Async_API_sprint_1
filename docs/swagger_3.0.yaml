openapi: 3.0.3
info:
  title: Auth. Sprint 6.
  description: |-
    ### Вопросики:
      - наверено, не нужны одновременно `login` и `email` для юзера. (Не помню откуда притащил login, может быть откуда-то из теории.)  

  version: 0.1.0
servers:
  - url: http://127.0.0.1:5000
  - url: http://127.0.0.1
tags:
  - name: auth
    description: Аутентификация
  - name: user
    description: Действия над пользователями
  - name: role
    description: Управление списком ролей

paths:
  /api/v1/signup:
    post:
      tags:
        - auth
      summary: Регистрация клиента, админа или другого пользователя.
      description: ""
      parameters:
        - name: email
          in: query
          description: Электронная почта.
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Пароль.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"

  /api/v1/singin:
    get: 
      tags:
        - auth
      summary: Аутентификация пользователя.
      description: ''
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: Электропочта
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: Пароль
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Success-Token:
              description: JWT
              schema:
                type: string
            X-Refresh-Token:
              description: Обычный UUID
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied

  /api/v1/signout:
    post:
      tags:
        - auth
      summary: Выход пользователя.
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation

  /api/v1/refresh:
    post:
      tags:
        - auth
      summary: Обновить refresh-токен.


  /api/v1/users:
    get:
      tags:
        - user
      summary: Список пользователей.
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          description: Номер страницы
          schema:
            type: string
            default: 1
        - name: per_page
          in: query
          description: Кол-во юзеров на странице
          schema:
            type: string
            default: 20
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponseUsers'

  /api/v1/users/{user_id}/:
    get:
      tags:
        - user
      summary: Получить личные данные пользователя.
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          description: ID пользователя
          required: true
          schema:
            type: string
            format: uuid
            title: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserScheme'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseMessage'
    patch:
      tags:
        - user
      summary: Изменить личные данные пользователя.
      description: Редактировать username, email или другие сведенья.
      operationId: EditUser
      requestBody:
        description: Если поля нет, значение не изменится (PATCH)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateScheme'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserScheme'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseMessage'

  /api/v1/users/{user_id}/singins/:
    get:
      tags:
        - user
      summary: "Получить список входов пользователя в систему."
      description: "История входов текущего пользователя в систему."
      parameters: []
      responses:
        "200":
          description: "Показывает историю входов пользователя."
        "404":
          description: "Нет пользователя с таким user_id."

  /api/v1/users/{user_id}/roles/:
    get:
      tags:
        - user
      summary: Получить роли и права пользователя.
    post:
      tags:
        - user
      summary: Назначить роль пользователю.
      responses:
        201:
          description: Роль назначена пользователю.

  /api/v1/users/{user_id}/roles/{role_id}:
    delete:
      tags:
        - user
      summary: Отобрать у пользователя роль.


  /api/v1/roles:
    get:
      summary: Получить все роли.
      tags:
        - role
      responses:
        
    post:
      summary: Создать новую роль.
      tags:
        - role
      responses:

  /api/v1/roles/{role_id}:
    patch:
      tags:
        - role
      summary: Изменить существующую роль.
      responses:
    delete:
      tags:
        - role
      summary: Удалить роль.
      responses:


components:
  schemas:
    UserScheme:
      required: 
        - id
        - email
      type: object
      properties: 
        id:
          type: string
          title: uuid
          format: uuid
        email:
          type: string
        login:
          type: string
        is_superuser:
          type: boolean
        password:
          type: string
        roles:
          type: array
          items: 
            $ref: '#/components/schemas/RoleScheme'
    UserCreateScheme:
      required:
        - email
        - name
      type: object
      properties: 
        email:
          type: string
        login:
          type: string
        is_superuser:
          type: boolean
        password:
          type: string
    UserEditScheme:
      required:
        - email
        - name
      type: object
      properties: 
        email:
          type: string
        login:
          type: string
        is_superuser:
          type: boolean
        password:
          type: string
        roles:
          type: array
    RoleScheme:
      required:
        - id
        - name
      type: object
      properties: 
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    RoleEdit:
      required:
        - name
      type: object
      properties: 
        name:
          type: string
        description:
          type: string
    PaginationResponseUsers:
      required:
      type: object
      properties:
        total:
          type: integer
        page:
          type: integer
          example: 1
        pages:
          type: integer
          example: 1
        results:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/UserScheme'
    BaseMessage:
      type: object
      properties:
        message:
          type: string

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    access-token:
      type: apiKey
      name: access_token
      in: header
    refresh-token:
      type: apiKey
      name: refresh_token
      in: header